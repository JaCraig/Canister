{
  "api/Canister.Interfaces.ICanisterConfiguration.html": {
    "href": "api/Canister.Interfaces.ICanisterConfiguration.html",
    "title": "Interface ICanisterConfiguration | Canister API Reference",
    "keywords": "Interface ICanisterConfiguration Namespace Canister.Interfaces Assembly Canister.IoC.dll Canister configuration interface public interface ICanisterConfiguration Methods AddAssembly(params Assembly[]) Adds the assembly. ICanisterConfiguration AddAssembly(params Assembly[] assemblies) Parameters assemblies Assembly[] The assemblies. Returns ICanisterConfiguration This"
  },
  "api/Canister.Interfaces.IModule.html": {
    "href": "api/Canister.Interfaces.IModule.html",
    "title": "Interface IModule | Canister API Reference",
    "keywords": "Interface IModule Namespace Canister.Interfaces Assembly Canister.IoC.dll IoC module base class public interface IModule Properties Order Order to run this in int Order { get; } Property Value int Methods Load(IServiceCollection) Loads the module using the service collection. void Load(IServiceCollection serviceDescriptors) Parameters serviceDescriptors IServiceCollection The service descriptors."
  },
  "api/Canister.Interfaces.html": {
    "href": "api/Canister.Interfaces.html",
    "title": "Namespace Canister.Interfaces | Canister API Reference",
    "keywords": "Namespace Canister.Interfaces Interfaces ICanisterConfiguration Canister configuration interface IModule IoC module base class"
  },
  "api/Canister.IoC.Modules.DefaultModule.html": {
    "href": "api/Canister.IoC.Modules.DefaultModule.html",
    "title": "Class DefaultModule | Canister API Reference",
    "keywords": "Class DefaultModule Namespace Canister.IoC.Modules Assembly Canister.IoC.dll Default module public class DefaultModule : IModule Inheritance object DefaultModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Order to run this in public int Order { get; } Property Value int Methods Load(IServiceCollection) Loads the module using the bootstrapper public void Load(IServiceCollection serviceDescriptors) Parameters serviceDescriptors IServiceCollection The service descriptors. See Also IModule"
  },
  "api/Canister.IoC.Modules.html": {
    "href": "api/Canister.IoC.Modules.html",
    "title": "Namespace Canister.IoC.Modules | Canister API Reference",
    "keywords": "Namespace Canister.IoC.Modules Classes DefaultModule Default module"
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Canister API Reference",
    "keywords": "Class ServiceCollectionExtensions Namespace Microsoft.Extensions.DependencyInjection Assembly Canister.IoC.dll Service collection extension methods public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAllScoped(IServiceCollection?, Type) Registers all objects of a certain type with the service collection as scoped. public static IServiceCollection? AddAllScoped(this IServiceCollection? serviceDescriptors, Type registerType) Parameters serviceDescriptors IServiceCollection The service descriptors. registerType Type Type to register. Returns IServiceCollection The service collection AddAllScoped<T>(IServiceCollection?) Registers all objects of a certain type with the service collection as scoped. public static IServiceCollection? AddAllScoped<T>(this IServiceCollection? serviceDescriptors) Parameters serviceDescriptors IServiceCollection The service descriptors. Returns IServiceCollection The service collection Type Parameters T Object type AddAllSingleton(IServiceCollection?, Type) Registers all objects of a certain type with the service collection as a singleton. public static IServiceCollection? AddAllSingleton(this IServiceCollection? serviceDescriptors, Type registerType) Parameters serviceDescriptors IServiceCollection The service descriptors. registerType Type Type to register. Returns IServiceCollection The service collection AddAllSingleton<T>(IServiceCollection?) Registers all objects of a certain type with the service collection as a singleton. public static IServiceCollection? AddAllSingleton<T>(this IServiceCollection? serviceDescriptors) Parameters serviceDescriptors IServiceCollection The service descriptors. Returns IServiceCollection The service collection Type Parameters T Object type AddAllTransient(IServiceCollection?, Type) Registers all objects of a certain type with the service collection as a transient. public static IServiceCollection? AddAllTransient(this IServiceCollection? serviceDescriptors, Type registerType) Parameters serviceDescriptors IServiceCollection The service descriptors. registerType Type Type to register. Returns IServiceCollection The service collection AddAllTransient<T>(IServiceCollection?) Registers all objects of a certain type with the service collection as a transient. public static IServiceCollection? AddAllTransient<T>(this IServiceCollection? serviceDescriptors) Parameters serviceDescriptors IServiceCollection The service descriptors. Returns IServiceCollection The service collection Type Parameters T Object type AddCanisterModules(IServiceCollection?, Action<ICanisterConfiguration>?) Finds the Canister modules and loads them into the service collection. public static IServiceCollection? AddCanisterModules(this IServiceCollection? serviceDescriptors, Action<ICanisterConfiguration>? configure = null) Parameters serviceDescriptors IServiceCollection The service descriptors. configure Action<ICanisterConfiguration> The configuration (if you wish to have more control and specify which assemblies to load the modules from). Returns IServiceCollection The service collection."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Canister API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions Service collection extension methods"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Canister API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Canister API Reference",
    "keywords": "Code using Canister.Interfaces; using Microsoft.Extensions.DependencyInjection; namespace Canister.IoC.Example { /// <summary> /// This is an example service interface that will be loaded into the service collection /// </summary> internal interface IMyService { /// <summary> /// Gets the name. /// </summary> /// <value> /// The name. /// </value> string Name { get; } } /// <summary> /// Example of how to use Canister /// </summary> internal static class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Basic service collection ServiceProvider? ServiceProvider = new ServiceCollection() // Add the canister modules .AddCanisterModules() // Add all classes that implement IMyService as singletons .AddAllSingleton<IMyService>() // Build the service provider ?.BuildServiceProvider(); // Get all the services that implement IMyService IEnumerable<IMyService> ServiceClasses = ServiceProvider?.GetServices<IMyService>() ?? Array.Empty<IMyService>(); // Write out the number of services found (should be 2) System.Console.WriteLine(\"Number of services found: {0}\", ServiceClasses.Count()); // Write out the names of the services found (should be ExampleService1 and ExampleService2) foreach (IMyService ServiceClass in ServiceClasses) { System.Console.WriteLine(ServiceClass.Name); } // Write out the name of the simple example class (should be SimpleExampleClass) SimpleExampleClass? SimpleExampleClass = ServiceProvider?.GetService<SimpleExampleClass>(); System.Console.WriteLine(SimpleExampleClass?.Name); } } /// <summary> /// Example service 1 /// </summary> /// <seealso cref=\"IMyService\" /> internal class ExampleService1 : IMyService { /// <summary> /// Gets the name. /// </summary> /// <value> /// The name. /// </value> public string Name => \"ExampleService1\"; } /// <summary> /// Example service 2 /// </summary> /// <seealso cref=\"IMyService\" /> internal class ExampleService2 : IMyService { /// <summary> /// Gets the name. /// </summary> /// <value> /// The name. /// </value> public string Name => \"ExampleService2\"; } /// <summary> /// This is a module that will be called and loaded into the service collection /// </summary> /// <seealso cref=\"IModule\" /> internal class MyModule : IModule { /// <summary> /// Order to run this in /// </summary> public int Order { get; } /// <summary> /// Loads the module using the service collection. /// </summary> /// <param name=\"serviceDescriptors\">The service descriptors.</param> public void Load(IServiceCollection serviceDescriptors) => serviceDescriptors.AddTransient<SimpleExampleClass>(); } /// <summary> /// This is a simple example class /// </summary> internal class SimpleExampleClass { /// <summary> /// Gets the name. /// </summary> /// <value> /// The name. /// </value> public string Name => \"SimpleExampleClass\"; } } Output Number of services found: 2 ExampleService1 ExampleService2 SimpleExampleClass"
  },
  "index.html": {
    "href": "index.html",
    "title": "Canister | Canister API Reference",
    "keywords": "Canister Canister is one of the easiest ways to get IoC configuration under control. No longer do you have to search for that one class that you forgot to register. Instead use Canister to handle discovery and registration for you using a simple interface. Basic Usage The system has a fairly simple interface and only a couple of functions that need explaining. The first is setup: public void ConfigureServices(IServiceCollection services) { ... services.AddCanisterModules(); } AddCanisterModules will automatically scan assemblies for modules and load them accordingly. Or if you're doing a desktop app: var Services = new ServiceCollection().AddCanisterModules(); Note that if you like, you can control which assemblies are searched: public void ConfigureServices(IServiceCollection services) { ... services.AddCanisterModules(configure => configure.AddAssembly(typeof(Startup).Assembly)); } It's recommended that you do this for security reasons as the default will search all assemblies found in the entry assembly's top level directory. Modules Canister uses the concept of modules to wire things up. This allows you to place registration code in libraries that your system is using instead of worrying about it in every application. Simply add your library and Canister will automatically wire it up for you. In order to do this, under Canister.Interfaces there is the IModule interface. This interface, when implemented, has two items in it. The first is a property called Order. This determines the order that the modules are loaded in. The second is a function called Load: public class TestModule : IModule { public int Order => 1; public void Load(IServiceCollection bootstrapper) { bootstrapper.AddAllTransient<IMyInterface>(); bootstrapper.AddTransient<MyType>(); } } The module above is loaded automatically by the system and will have the Load function called at initialization time. At this point you should be able to resolve and register classes using the bootstrapper parameter. The service collection also has a couple of extra extension methods: AddAllTransient, AddAllScoped, AddAllSingleton: bootstrapper.AddAllTransient<IMyInterface>(); The AddAllxxxx functions will find everything that implements a class or interface in the Assemblies that you tell it to look in and will register them with the service collection. Working With Other IoC Containers While the library assumes you are using the built in ServiceCollection, it is possible to work with IoC containers. All that is required is that it implements the IServiceCollection interface. Using Canister in Your library If you wish to use Canister in your library it is recommended that you build an extension method off of the ICanisterConfiguration interface that will allow you to register your needed assemblies for the user to make the experience a bit simpler when they want to control configuration themselves. Installation The library is available via Nuget with the package name \"Canister.IoC\". To install it run the following command in the Package Manager Console: Install-Package Canister.IoC Build Process In order to build the library you may require the following: Visual Studio 2022 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}